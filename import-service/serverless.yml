service:
  name: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  profile: learn-aws
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_URL:
      Ref: SQSQueue

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::hw5-product-files"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::hw5-product-files/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [SQSQueue, Arn]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: get
          path: import
          cors: true
          request:
            parameters:
              paths:
                name: true          
          authorizer:
            name: basicAuthorizer
            arn: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:authorization-service-${self:provider.stage}-basicAuthorizer"
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: hw5-product-files
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true 
