service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  profile: learn-aws
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    # - Effect: Allow
    #   Action: "sqs:*"
    #   Resource:
    #     - "${cf:product-service-${self:provider.stage}.SQSQueueArn}"
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscriptionAllProducts:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: candentira@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionWholesale:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: vikich@yandex.ru
        Protocol: email
        FilterPolicy:
          productCount:
            - numeric:
                - ">"
                - 9
        TopicArn:
          Ref: SNSTopic

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          method: get
          path: products
          cors: true
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          method: get
          path: products/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true
  createProducts:
    handler: handler.createProducts
    events:
      - http:
          method: post
          path: products/
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: "${cf:import-service-${self:provider.stage}.SQSQueueArn}"
